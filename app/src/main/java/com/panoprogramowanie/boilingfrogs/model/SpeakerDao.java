package com.panoprogramowanie.boilingfrogs.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SPEAKER".
 */
public class SpeakerDao extends AbstractDao<Speaker, Long> {

    public static final String TABLENAME = "SPEAKER";

    /**
     * Properties of entity Speaker.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Occupation = new Property(2, String.class, "occupation", false, "OCCUPATION");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property PhotoUrl = new Property(4, String.class, "photoUrl", false, "PHOTO_URL");
        public final static Property Twitter = new Property(5, String.class, "twitter", false, "TWITTER");
        public final static Property Linkedin = new Property(6, String.class, "linkedin", false, "LINKEDIN");
        public final static Property Facebook = new Property(7, String.class, "facebook", false, "FACEBOOK");
    }

    ;

    private DaoSession daoSession;


    public SpeakerDao(DaoConfig config) {
        super(config);
    }

    public SpeakerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"SPEAKER\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"OCCUPATION\" TEXT," + // 2: occupation
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"PHOTO_URL\" TEXT," + // 4: photoUrl
                "\"TWITTER\" TEXT," + // 5: twitter
                "\"LINKEDIN\" TEXT," + // 6: linkedin
                "\"FACEBOOK\" TEXT);"); // 7: facebook
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SPEAKER\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Speaker entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }

        String occupation = entity.getOccupation();
        if (occupation != null) {
            stmt.bindString(3, occupation);
        }

        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }

        String photoUrl = entity.getPhotoUrl();
        if (photoUrl != null) {
            stmt.bindString(5, photoUrl);
        }

        String twitter = entity.getTwitter();
        if (twitter != null) {
            stmt.bindString(6, twitter);
        }

        String linkedin = entity.getLinkedin();
        if (linkedin != null) {
            stmt.bindString(7, linkedin);
        }

        String facebook = entity.getFacebook();
        if (facebook != null) {
            stmt.bindString(8, facebook);
        }
    }

    @Override
    protected void attachEntity(Speaker entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Speaker readEntity(Cursor cursor, int offset) {
        Speaker entity = new Speaker( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // occupation
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // photoUrl
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // twitter
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // linkedin
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // facebook
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Speaker entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOccupation(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhotoUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTwitter(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLinkedin(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFacebook(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(Speaker entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(Speaker entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
