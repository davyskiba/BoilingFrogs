package com.panoprogramowanie.boilingfrogs.model.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.panoprogramowanie.boilingfrogs.model.greendao.Speech;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SPEECH".
*/
public class SpeechDao extends AbstractDao<Speech, Long> {

    public static final String TABLENAME = "SPEECH";

    /**
     * Properties of entity Speech.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property Path = new Property(3, Integer.class, "path", false, "PATH");
        public final static Property YoutubeUrl = new Property(4, String.class, "youtubeUrl", false, "YOUTUBE_URL");
        public final static Property SpeakerId = new Property(5, Long.class, "speakerId", false, "SPEAKER_ID");
        public final static Property SpeechSlotId = new Property(6, Long.class, "speechSlotId", false, "SPEECH_SLOT_ID");
    };

    private DaoSession daoSession;

    private Query<Speech> speaker_SpeechListQuery;
    private Query<Speech> speechSlot_SpeechListQuery;

    public SpeechDao(DaoConfig config) {
        super(config);
    }
    
    public SpeechDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SPEECH\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"PATH\" INTEGER," + // 3: path
                "\"YOUTUBE_URL\" TEXT," + // 4: youtubeUrl
                "\"SPEAKER_ID\" INTEGER," + // 5: speakerId
                "\"SPEECH_SLOT_ID\" INTEGER);"); // 6: speechSlotId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SPEECH\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Speech entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        Integer path = entity.getPath();
        if (path != null) {
            stmt.bindLong(4, path);
        }
 
        String youtubeUrl = entity.getYoutubeUrl();
        if (youtubeUrl != null) {
            stmt.bindString(5, youtubeUrl);
        }
 
        Long speakerId = entity.getSpeakerId();
        if (speakerId != null) {
            stmt.bindLong(6, speakerId);
        }
 
        Long speechSlotId = entity.getSpeechSlotId();
        if (speechSlotId != null) {
            stmt.bindLong(7, speechSlotId);
        }
    }

    @Override
    protected void attachEntity(Speech entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Speech readEntity(Cursor cursor, int offset) {
        Speech entity = new Speech( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // path
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // youtubeUrl
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // speakerId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // speechSlotId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Speech entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPath(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setYoutubeUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSpeakerId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setSpeechSlotId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Speech entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Speech entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "speechList" to-many relationship of Speaker. */
    public List<Speech> _querySpeaker_SpeechList(Long speakerId) {
        synchronized (this) {
            if (speaker_SpeechListQuery == null) {
                QueryBuilder<Speech> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SpeakerId.eq(null));
                speaker_SpeechListQuery = queryBuilder.build();
            }
        }
        Query<Speech> query = speaker_SpeechListQuery.forCurrentThread();
        query.setParameter(0, speakerId);
        return query.list();
    }

    /** Internal query to resolve the "speechList" to-many relationship of SpeechSlot. */
    public List<Speech> _querySpeechSlot_SpeechList(Long speechSlotId) {
        synchronized (this) {
            if (speechSlot_SpeechListQuery == null) {
                QueryBuilder<Speech> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SpeechSlotId.eq(null));
                speechSlot_SpeechListQuery = queryBuilder.build();
            }
        }
        Query<Speech> query = speechSlot_SpeechListQuery.forCurrentThread();
        query.setParameter(0, speechSlotId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSpeakerDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getSpeechSlotDao().getAllColumns());
            builder.append(" FROM SPEECH T");
            builder.append(" LEFT JOIN SPEAKER T0 ON T.\"SPEAKER_ID\"=T0.\"ID\"");
            builder.append(" LEFT JOIN SPEECH_SLOT T1 ON T.\"SPEECH_SLOT_ID\"=T1.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Speech loadCurrentDeep(Cursor cursor, boolean lock) {
        Speech entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Speaker speaker = loadCurrentOther(daoSession.getSpeakerDao(), cursor, offset);
        entity.setSpeaker(speaker);
        offset += daoSession.getSpeakerDao().getAllColumns().length;

        SpeechSlot speechSlot = loadCurrentOther(daoSession.getSpeechSlotDao(), cursor, offset);
        entity.setSpeechSlot(speechSlot);

        return entity;    
    }

    public Speech loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Speech> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Speech> list = new ArrayList<Speech>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Speech> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Speech> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
